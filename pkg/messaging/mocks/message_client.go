// Code generated by mockery v2.9.4. DO NOT EDIT.

package mocks

import (
	context "context"

	grpc "google.golang.org/grpc"

	messaging "github.com/platform-edn/courier/pkg/messaging"

	mock "github.com/stretchr/testify/mock"
)

// MessageClient is an autogenerated mock type for the MessageClient type
type MessageClient struct {
	mock.Mock
}

// PublishMessage provides a mock function with given fields: ctx, in, opts
func (_m *MessageClient) PublishMessage(ctx context.Context, in *messaging.PublishMessageRequest, opts ...grpc.CallOption) (*messaging.PublishMessageResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *messaging.PublishMessageResponse
	if rf, ok := ret.Get(0).(func(context.Context, *messaging.PublishMessageRequest, ...grpc.CallOption) *messaging.PublishMessageResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*messaging.PublishMessageResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *messaging.PublishMessageRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RequestMessage provides a mock function with given fields: ctx, in, opts
func (_m *MessageClient) RequestMessage(ctx context.Context, in *messaging.RequestMessageRequest, opts ...grpc.CallOption) (*messaging.RequestMessageResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *messaging.RequestMessageResponse
	if rf, ok := ret.Get(0).(func(context.Context, *messaging.RequestMessageRequest, ...grpc.CallOption) *messaging.RequestMessageResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*messaging.RequestMessageResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *messaging.RequestMessageRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ResponseMessage provides a mock function with given fields: ctx, in, opts
func (_m *MessageClient) ResponseMessage(ctx context.Context, in *messaging.ResponseMessageRequest, opts ...grpc.CallOption) (*messaging.ResponseMessageResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *messaging.ResponseMessageResponse
	if rf, ok := ret.Get(0).(func(context.Context, *messaging.ResponseMessageRequest, ...grpc.CallOption) *messaging.ResponseMessageResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*messaging.ResponseMessageResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *messaging.ResponseMessageRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
