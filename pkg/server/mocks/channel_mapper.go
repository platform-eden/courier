// Code generated by mockery v2.10.0. DO NOT EDIT.

package mocks

import (
	messaging "github.com/platform-edn/courier/pkg/messaging"
	mock "github.com/stretchr/testify/mock"
)

// ChannelMapper is an autogenerated mock type for the ChannelMapper type
type ChannelMapper struct {
	mock.Mock
}

// CloseSubscriberChannels provides a mock function with given fields:
func (_m *ChannelMapper) CloseSubscriberChannels() {
	_m.Called()
}

// GenerateMessageChannels provides a mock function with given fields: _a0
func (_m *ChannelMapper) GenerateMessageChannels(_a0 string) (<-chan chan messaging.Message, error) {
	ret := _m.Called(_a0)

	var r0 <-chan chan messaging.Message
	if rf, ok := ret.Get(0).(func(string) <-chan chan messaging.Message); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(<-chan chan messaging.Message)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SubscribeToSubject provides a mock function with given fields: _a0
func (_m *ChannelMapper) SubscribeToSubject(_a0 string) <-chan messaging.Message {
	ret := _m.Called(_a0)

	var r0 <-chan messaging.Message
	if rf, ok := ret.Get(0).(func(string) <-chan messaging.Message); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(<-chan messaging.Message)
		}
	}

	return r0
}

// Subscriptions provides a mock function with given fields: _a0
func (_m *ChannelMapper) Subscriptions(_a0 string) ([]chan messaging.Message, error) {
	ret := _m.Called(_a0)

	var r0 []chan messaging.Message
	if rf, ok := ret.Get(0).(func(string) []chan messaging.Message); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]chan messaging.Message)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
