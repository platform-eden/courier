// Code generated by mockery v2.9.4. DO NOT EDIT.

package mocks

import (
	node "github.com/platform-edn/courier/node"
	mock "github.com/stretchr/testify/mock"
)

// NodeStorer is an autogenerated mock type for the NodeStorer type
type NodeStorer struct {
	mock.Mock
}

// AddNode provides a mock function with given fields: _a0
func (_m *NodeStorer) AddNode(_a0 *node.Node) error {
	ret := _m.Called(_a0)

	var r0 error
	if rf, ok := ret.Get(0).(func(*node.Node) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetSubscribers provides a mock function with given fields: _a0
func (_m *NodeStorer) GetSubscribers(_a0 ...string) ([]*node.Node, error) {
	_va := make([]interface{}, len(_a0))
	for _i := range _a0 {
		_va[_i] = _a0[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 []*node.Node
	if rf, ok := ret.Get(0).(func(...string) []*node.Node); ok {
		r0 = rf(_a0...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*node.Node)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(...string) error); ok {
		r1 = rf(_a0...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RemoveNode provides a mock function with given fields: _a0
func (_m *NodeStorer) RemoveNode(_a0 *node.Node) error {
	ret := _m.Called(_a0)

	var r0 error
	if rf, ok := ret.Get(0).(func(*node.Node) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
